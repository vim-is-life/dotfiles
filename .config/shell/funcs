#!/usr/bin/env sh

# BRIGHTNESS STUFF ############################################################
# get current system brightness
get_brightness() {
    cat /sys/class/backlight/intel_backlight/brightness
}

# get maximum system brightness
get_max_brightness() {
    cat /sys/class/backlight/intel_backlight/max_brightness

}

# change the brightness by writing to the file storing it
change_brightness() {
    echo "$1" | doas tee /sys/class/backlight/intel_backlight/brightness
}

# increase the brightness by a certain percent
# if no percent increment provided, change by 5%
# NOTE: percent increment (first arg) must be an integer in range [0, 100]
increase_brightness() {
    # args
    percent_increment=5
    if [ "$#" -ne 0 ]; then
        percent_increment=$1
    fi

    # on intel, lowest brightness is 0 so i can take max-brightness to be the range
    MAX=$(get_max_brightness)
    CUR=$(get_brightness)
    ACTUAL_INCR=$((MAX * percent_increment / 100))
    NEW_BRIGHTNESS=$((CUR + ACTUAL_INCR))

    echo "brightness: $((CUR * 100 / MAX))% -> $((NEW_BRIGHTNESS * 100 / MAX))%"
    change_brightness $NEW_BRIGHTNESS
}

# decrease the brightness by a certain percent
# if no percent increment provided, change by 5%
# NOTE: percent increment (first arg) must be an integer in range [0, 100]
decrease_brightness() {
    # args
    percent_increment=5
    if [ "$#" -ne 0 ]; then
        percent_increment=$1
    fi

    # on intel, lowest brightness is 0 so i can take max-brightness to be the range
    MAX=$(get_max_brightness)
    CUR=$(get_brightness)
    ACTUAL_INCR=$((MAX * percent_increment / 100))
    NEW_BRIGHTNESS=$((CUR - ACTUAL_INCR))

    [ 0 -eq $CUR ] && return
    [ $NEW_BRIGHTNESS -le 0 ] && return

    echo "brightness: $((CUR * 100 / MAX))% -> $((NEW_BRIGHTNESS * 100 / MAX))%"
    change_brightness $NEW_BRIGHTNESS
}

# MISC FUNCTIONS ##############################################################
m() {
    # man -Tpdf "$@" | devour zathura -
    tmpfile="/tmp/tmp.koDRJpFhol"
    man -Tpdf "$@" >$tmpfile
    zathura $tmpfile &
    disown
    sleep 0.5 && exit
}

# the next two, i use to help focus by stopping, say, firefox, and then restarting after
# Stop (or suspend, as I like to think of it) a process by name
stop_proc() {
    proc_name="$1"
    killall --signal=STOP "$proc_name"
}

# Continue (or resume, as I like to think of it) a process by name (esp one stopped by the `stop-proc` fn)
resume_proc() {
    proc_name="$1"
    killall --signal=CONT "$proc_name"
}

# TODO evaluate what other things i should make as functions instead of scripts
